<!doctype html><html lang="ru"><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><meta name="keywords" content="nursultan, nurik, wexside, celestial, akrien, minecraft, minecraft 1.8, minecraft 1.12.2, minecraft 1.16.5, deadcode, нурсултан, nursultan client, нурсултан клиент, нурик, вексайд, целестиал, акриен, майнкрафт, чит, читы, читы для майнкрафт, читы для minecraft, чит на майнкрафт, чит на minecraft"><meta name="description" content=" Nursultan client - Лучший чит-клиент для комфортной игры. Для майнкрафт 1.12.2 "><title>Nursultan - Лучший клиент для комфортной игры.</title><link href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous"><link href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap4.min.css" rel="stylesheet" crossorigin="anonymous"><link href="https://cdn.nursultan.fun/fontawesome/css/all.min.css" rel="stylesheet"><link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet"><script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script><script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script><script src="https://www.google.com/recaptcha/api.js?render=6LcGNv8gAAAAALpxT08_IRm4JuSMgXRrE226G8RI"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r122/three.min.js"></script><script defer="defer" src="static\js\main.cdfeae3a.js"></script><link href="static\css\main.98d3d4ef.css" rel="stylesheet"></head><body><noscript>You need to enable JavaScript to run this app.</noscript><div id="root"></div><canvas class="glslCanvas" id="canvas" width="0" height="0"></canvas><script>const toMatch=[/Android/i,/webOS/i,/iPhone/i,/iPad/i,/iPod/i,/BlackBerry/i,/Windows Phone/i];window.isMobile=function(){let e=!1;var n;return n=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(n)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(n.substr(0,4)))&&(e=!0),e};class CustomScene{scene;camera;geometry;light;material;mesh;renderer;clock;lastWidth=document.body.clientWidth;lastHeight=document.body.scrollHeight;init(e){this.scene=new THREE.Scene,this.scene.background=new THREE.Color(14935011),this.light=new THREE.SpotLight(16777215,1);const n=this.lastWidth/this.lastHeight;this.camera=new THREE.PerspectiveCamera(45,n,1,100),this.geometry=new THREE.PlaneBufferGeometry(30,10),this.material=new THREE.ShaderMaterial({vertexShader:"\n            precision mediump float;\nvarying vec2 vUv;\n                     \nvoid main() {\nvUv = uv;\ngl_Position = projectionMatrix * modelViewMatrix *    vec4(position, 1.0);\n}\n            ",fragmentShader:"\n            #ifdef GL_ES\nprecision mediump float;\n#endif\n \n            #define NUM_OCTAVES 10\n                        \n            uniform float uTime;\n                                                   uniform vec2 uResolution;\n                                                   \n                                                   vec3 mod289(vec3 x) {\n                                                     return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                   }\n                                                   \n                                                   vec4 mod289(vec4 x) {\n                                                     return x - floor(x * (1.0 / 289.0)) * 289.0;\n                                                   }\n                                                   \n                                                   vec4 permute(vec4 x) {\n                                                        return mod289(((x*34.0)+1.0)*x);\n                                                   }\n                                                   \n                                                   vec4 taylorInvSqrt(vec4 r)\n                                                   {\n                                                     return 1.79284291400159 - 0.85373472095314 * r;\n                                                   }\n                                                   \n                                                   float snoise(vec3 v)\n                                                     {\n                                                     const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n                                                     const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n                                                   \n                                                     vec3 i  = floor(v + dot(v, C.yyy) );\n                                                     vec3 x0 =   v - i + dot(i, C.xxx) ;\n                                                   \n                                                     vec3 g = step(x0.yzx, x0.xyz);\n                                                     vec3 l = 1.0 - g;\n                                                     vec3 i1 = min( g.xyz, l.zxy );\n                                                     vec3 i2 = max( g.xyz, l.zxy );\n                                                   \n                                                     vec3 x1 = x0 - i1 + C.xxx;\n                                                     vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n                                                     vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n                                                   \n                                                     i = mod289(i);\n                                                     vec4 p = permute( permute( permute(\n                                                                i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                                                              + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n                                                              + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n                                                   \n                                                     float n_ = 0.142857142857; // 1.0/7.0\n                                                     vec3  ns = n_ * D.wyz - D.xzx;\n                                                   \n                                                     vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n                                                   \n                                                     vec4 x_ = floor(j * ns.z);\n                                                     vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n                                                   \n                                                     vec4 x = x_ *ns.x + ns.yyyy;\n                                                     vec4 y = y_ *ns.x + ns.yyyy;\n                                                     vec4 h = 1.0 - abs(x) - abs(y);\n                                                   \n                                                     vec4 b0 = vec4( x.xy, y.xy );\n                                                     vec4 b1 = vec4( x.zw, y.zw );\n                                                   \n                                                     //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n                                                     //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n                                                     vec4 s0 = floor(b0)*2.0 + 1.0;\n                                                     vec4 s1 = floor(b1)*2.0 + 1.0;\n                                                     vec4 sh = -step(h, vec4(0.0));\n                                                   \n                                                     vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n                                                     vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n                                                   \n                                                     vec3 p0 = vec3(a0.xy,h.x);\n                                                     vec3 p1 = vec3(a0.zw,h.y);\n                                                     vec3 p2 = vec3(a1.xy,h.z);\n                                                     vec3 p3 = vec3(a1.zw,h.w);\n                                                   \n                                                     vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n                                                     p0 *= norm.x;\n                                                     p1 *= norm.y;\n                                                     p2 *= norm.z;\n                                                     p3 *= norm.w;\n                                                   \n                                                     vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n                                                     m = m * m;\n                                                     return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                                                                   dot(p2,x2), dot(p3,x3) ) );\n                                                     }\n                                                   \n                                                   vec3 normal(vec3 v, float delta) {\n                                                   \tvec2 coefficient = vec2(\n                                                   \t\tsnoise(v + vec3(delta, 0.0, 0.0)) - snoise(v - vec3(delta, 0.0, 0.0)),\n                                                   \t\tsnoise(v + vec3(0.0, delta, 0.0)) - snoise(v - vec3(0.0, delta, 0.0))\n                                                   \t) / delta;\n                                                   \tcoefficient *= 0.3;\n                                                   \tvec3 req = vec3(\n                                                   \t\t-coefficient.x,\n                                                   \t\t-coefficient.y,\n                                                   \t\t1.0\n                                                   \t);\n                                                   \treq /= length(req);\n                                                   \t\n                                                   \treturn req;\n                                                   }\n                                                   \n                                                   void main() {\n                                                   \tvec2 uv = gl_FragCoord.xy / min(uResolution.x, uResolution.y) * 0.6;\n                                                   \t\n                                                   \tvec3 p = normal(vec3(uv, uTime*0.23), 0.01);\n                                                   \tp = (p + vec3(1.0)) * 0.5;\n                                                   \n                                                   \tgl_FragColor = vec4(p, 1.0);\n                                                   \n                                                   }\n            ",uniforms:{uTime:{value:0},uResolution:{value:{x:this.lastWidth,y:this.lastHeight}},uMouse:{value:{x:0,y:0}},uColor:{value:new THREE.Color(16777215)}}}),this.mesh=new THREE.Mesh(this.geometry,this.material),this.renderer=new THREE.WebGLRenderer({canvas:e}),this.renderer.setClearColor(16777215,1),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(this.lastWidth,this.lastHeight),this.scene.add(this.camera),this.scene.add(this.mesh),this.scene.add(this.light),this.mesh.position.set(0,0,0),this.camera.position.set(0,0,10),this.light.position.set(0,0,10),this.light.lookAt(this.mesh.position),this.camera.lookAt(this.mesh.position),this.clock=new THREE.Clock,this.addEvents()}run(){const e=document.body.clientWidth,n=document.body.scrollHeight;0==e||0==n||this.lastWidth==e&&this.lastHeight==n||(this.lastWidth=e,this.lastHeight=n,this.onResize()),setTimeout((()=>{window.requestAnimationFrame(this.run.bind(this))}),1e3/30),this.material.uniforms.uTime.value=this.clock.getElapsedTime(),this.renderer.render(this.scene,this.camera)}addEvents(){window.addEventListener("resize",this.onResize.bind(this),!1)}onResize(){this.material.uniforms.uResolution={value:{x:this.lastWidth,y:this.lastHeight}},this.camera.aspect=this.lastWidth/this.lastHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.lastWidth,this.lastHeight)}}if(!window.isMobile()){const e=new CustomScene;e.init(document.getElementById("canvas")),e.run()}</script></body></html>